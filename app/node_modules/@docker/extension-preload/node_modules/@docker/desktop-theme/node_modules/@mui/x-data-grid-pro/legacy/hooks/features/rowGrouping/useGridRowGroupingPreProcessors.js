import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import * as React from 'react';
import { useGridRegisterPreProcessor } from '@mui/x-data-grid/internals';
import { gridRowGroupingModelSelector } from './gridRowGroupingSelector';
import { createGroupingColDefForAllGroupingCriteria, createGroupingColDefForOneGroupingCriteria } from './createGroupingColDef';
import { getColDefOverrides, isGroupingColumn } from './gridRowGroupingUtils';
export var useGridRowGroupingPreProcessors = function useGridRowGroupingPreProcessors(apiRef, props) {
  var getGroupingColDefs = React.useCallback(function (columnsState) {
    if (props.disableRowGrouping) {
      return [];
    }

    var groupingColDefProp = props.groupingColDef; // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet

    var rowGroupingModel = gridRowGroupingModelSelector(apiRef).filter(function (field) {
      return !!columnsState.lookup[field];
    });

    if (rowGroupingModel.length === 0) {
      return [];
    }

    switch (props.rowGroupingColumnMode) {
      case 'single':
        {
          return [createGroupingColDefForAllGroupingCriteria({
            apiRef: apiRef,
            rowGroupingModel: rowGroupingModel,
            colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel),
            columnsLookup: columnsState.lookup
          })];
        }

      case 'multiple':
        {
          return rowGroupingModel.map(function (groupingCriteria) {
            return createGroupingColDefForOneGroupingCriteria({
              groupingCriteria: groupingCriteria,
              colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),
              groupedByColDef: columnsState.lookup[groupingCriteria],
              columnsLookup: columnsState.lookup
            });
          });
        }

      default:
        {
          return [];
        }
    }
  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);
  var updateGroupingColumn = React.useCallback(function (columnsState) {
    var groupingColDefs = getGroupingColDefs(columnsState);
    var newColumnFields = [];
    var newColumnsLookup = {}; // We only keep the non-grouping columns

    columnsState.all.forEach(function (field) {
      if (!isGroupingColumn(field)) {
        newColumnFields.push(field);
        newColumnsLookup[field] = columnsState.lookup[field];
      }
    }); // We add the grouping column

    groupingColDefs.forEach(function (groupingColDef) {
      var matchingGroupingColDef = columnsState.lookup[groupingColDef.field];

      if (matchingGroupingColDef) {
        groupingColDef.width = matchingGroupingColDef.width;
        groupingColDef.flex = matchingGroupingColDef.flex;
      }

      newColumnsLookup[groupingColDef.field] = groupingColDef;
    });
    var startIndex = newColumnFields[0] === '__check__' ? 1 : 0;
    newColumnFields = [].concat(_toConsumableArray(newColumnFields.slice(0, startIndex)), _toConsumableArray(groupingColDefs.map(function (colDef) {
      return colDef.field;
    })), _toConsumableArray(newColumnFields.slice(startIndex)));
    columnsState.all = newColumnFields;
    columnsState.lookup = newColumnsLookup;
    return columnsState;
  }, [getGroupingColDefs]);
  useGridRegisterPreProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);
};