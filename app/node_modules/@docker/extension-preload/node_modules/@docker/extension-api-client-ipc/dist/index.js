import * as os from 'os';
import { createBackendNode } from './createBackendNode';
import { wrapExecResult } from './wrapExecResult';
import { forwardEvents } from './forwardEvents';
import { displayDeprecationWarning } from './displayDeprecationWarning';
import { createDesktopUINode } from './createDesktopUINode';
import { createDockerNode } from './createDockerNode';
import { createExtensionNode } from './createExtensionNode';
export function createDockerDesktopClient(ipcRenderer, extensionName, hasBackend) {
    return {
        backend: hasBackend
            ? createBackendNode(extensionName, ipcRenderer)
            : undefined,
        execHostCmd(cmdStr) {
            displayDeprecationWarning('window.ddClient.execHostCmd(cmd)', 'ddClient.extension.host.cli.exec(cmd)');
            // Just for backwards commpatibility - will be removed in the future
            const [cmd, ...args] = cmdStr.split(' ');
            return ipcRenderer
                .invoke(`${extensionName}-exec-cmd`, cmd, args)
                .then(wrapExecResult);
        },
        spawnHostCmd(cmd, args, callback) {
            displayDeprecationWarning('window.ddClient.spawnHostCmd(cmd, ...args, callback)', 'ddClient.extension.host.cli.spawn(cmd, ...args, callback)');
            const { port1: recv, port2: send } = new MessageChannel();
            ipcRenderer.postMessage(`${extensionName}-spawn-cmd`, { cmd, args }, [
                send,
            ]);
            forwardEvents(recv, callback);
        },
        execDockerCmd(cmd, ...args) {
            displayDeprecationWarning('window.ddClient.execDockerCmd(cmd, ...args)', 'ddClient.docker.exec(cmd, ...args)');
            return ipcRenderer
                .invoke(`${extensionName}-exec-docker-cmd`, cmd, ...args)
                .then(wrapExecResult);
        },
        spawnDockerCmd(cmd, args, callback) {
            displayDeprecationWarning('window.ddClient.spawnDockerCmd(cmd, ...args, callback)', 'ddClient.docker.spawn(cmd, ...args, callback)');
            const { port1: recv, port2: send } = new MessageChannel();
            ipcRenderer.postMessage(`${extensionName}-spawn-docker-cmd`, { cmd, args }, [send]);
            forwardEvents(recv, callback);
        },
        toastSuccess(msg) {
            displayDeprecationWarning('window.ddClient.toastSuccess(msg)', 'ddClient.desktopUI.toast.success(msg)');
            ipcRenderer.invoke(`display-toast-success`, msg);
        },
        toastWarning(msg) {
            displayDeprecationWarning('window.ddClient.toastWarning(msg)', 'ddClient.desktopUI.toast.warning(msg)');
            ipcRenderer.invoke(`display-toast-warning`, msg);
        },
        toastError(msg) {
            displayDeprecationWarning('window.ddClient.toastError(msg)', 'ddClient.desktopUI.toast.error(msg)');
            ipcRenderer.invoke(`display-toast-error`, msg);
        },
        listContainers(options) {
            displayDeprecationWarning('window.ddClient.listContainers(options)', 'ddClient.docker.listContainers(options)');
            return ipcRenderer.invoke(`docker-list-containers`, options);
        },
        listImages(options) {
            displayDeprecationWarning('window.ddClient.listImages(options)', 'ddClient.docker.listImages(options)');
            return ipcRenderer.invoke(`docker-list-images`, options);
        },
        navigateToContainers() {
            displayDeprecationWarning('window.ddClient.navigateToContainers()', 'ddClient.desktopUI.navigate.viewContainers()');
            ipcRenderer.invoke(`navigate-to-containers`);
        },
        navigateToContainer(id) {
            displayDeprecationWarning('window.ddClient.navigateToContainer(id)', 'ddClient.desktopUI.navigate.viewContainer(id)');
            return ipcRenderer.invoke(`navigate-to-container`, { id });
        },
        navigateToContainerLogs(id) {
            displayDeprecationWarning('window.ddClient.navigateToContainerLogs(id)', 'ddClient.desktopUI.navigate.viewContainerLogs(id)');
            return ipcRenderer.invoke(`navigate-to-container-logs`, { id });
        },
        navigateToContainerInspect(id) {
            displayDeprecationWarning('window.ddClient.navigateToContainerInspect(id)', 'ddClient.desktopUI.navigate.viewContainerInspect(id)');
            return ipcRenderer.invoke(`navigate-to-container-inspect`, { id });
        },
        navigateToContainerStats(id) {
            displayDeprecationWarning('window.ddClient.navigateToContainerStats(id)', 'ddClient.desktopUI.navigate.viewContainerStats(id)');
            return ipcRenderer.invoke(`navigate-to-container-stats`, { id });
        },
        navigateToImages() {
            displayDeprecationWarning('window.ddClient.navigateToImages()', 'ddClient.desktopUI.navigate.viewImages()');
            ipcRenderer.invoke(`navigate-to-images`);
        },
        navigateToImage(id, tag) {
            displayDeprecationWarning('window.ddClient.navigateToImage(id, tag)', 'ddClient.desktopUI.navigate.viewImage(id, tag)');
            return ipcRenderer.invoke(`navigate-to-image`, { id, tag });
        },
        navigateToVolumes() {
            displayDeprecationWarning('window.ddClient.navigateToVolumes()', 'ddClient.desktopUI.navigate.viewVolumes()');
            ipcRenderer.invoke(`navigate-to-volumes`);
        },
        navigateToVolume(volume) {
            displayDeprecationWarning('window.ddClient.navigateToVolume(volume)', 'ddClient.desktopUI.navigate.viewVolume(volume)');
            ipcRenderer.invoke(`navigate-to-volume`, volume);
        },
        navigateToDevEnvironments() {
            displayDeprecationWarning('window.ddClient.navigateToDevEnvironments()', 'ddClient.desktopUI.navigate.viewDevEnvironments()');
            ipcRenderer.invoke(`navigate-to-devenvs`);
        },
        openExternal(url) {
            displayDeprecationWarning('window.ddClient.openExternal(url)', 'ddClient.host.openExternal(url)');
            ipcRenderer
                .invoke(`open-external`, url)
                .catch((error) => console.error(error));
        },
        desktopUI: createDesktopUINode(ipcRenderer),
        host: {
            openExternal(url) {
                ipcRenderer
                    .invoke(`open-external`, url)
                    .catch((error) => console.error(error));
            },
            platform: os.platform(),
            arch: os.arch(),
            hostname: os.hostname(),
        },
        docker: createDockerNode(ipcRenderer, extensionName),
        extension: createExtensionNode(ipcRenderer, extensionName),
    };
}
//# sourceMappingURL=index.js.map