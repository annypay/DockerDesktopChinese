import { forwardEventsStream } from './forwardEventsStream';
import { wrapExecResult } from './wrapExecResult';
export function createDockerNode(ipcRenderer, extensionName) {
    return {
        cli: {
            // @ts-expect-error TODO: Remove this
            exec(cmd, args, options) {
                if (options?.stream) {
                    const { port1: recv, port2: send } = new MessageChannel();
                    ipcRenderer.postMessage(`${extensionName}-spawn-docker-cmd`, { cmd, args }, [send]);
                    forwardEventsStream(recv, options.stream);
                    return {
                        close() {
                            recv.close();
                        },
                    };
                }
                // if not stream
                return ipcRenderer
                    .invoke(`${extensionName}-exec-docker-cmd`, cmd, ...args)
                    .then(wrapExecResult);
            },
        },
        listContainers(options) {
            return ipcRenderer.invoke(`docker-list-containers`, options);
        },
        listImages(options) {
            return ipcRenderer.invoke(`docker-list-images`, options);
        },
    };
}
//# sourceMappingURL=createDockerNode.js.map