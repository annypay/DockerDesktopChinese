import { displayDeprecationWarning } from './displayDeprecationWarning';
import { forwardEvents } from './forwardEvents';
import { wrapExecResult } from './wrapExecResult';
export function createBackendNode(extensionName, ipcRenderer) {
    return {
        get: (url) => {
            displayDeprecationWarning('window.ddClient.backend.get(url)', 'ddClient.extension.vm.service.get(url)');
            return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                method: 'GET',
                url,
            });
        },
        post(url, data) {
            displayDeprecationWarning('window.ddClient.backend.post(url, data)', 'ddClient.extension.vm.service.post(url, data)');
            return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                method: 'POST',
                url,
                data,
            });
        },
        put(url, data) {
            displayDeprecationWarning('window.ddClient.backend.put(url, data)', 'ddClient.extension.vm.service.put(url, data)');
            return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                method: 'PUT',
                url,
                data,
            });
        },
        patch(url, data) {
            displayDeprecationWarning('window.ddClient.backend.patch(url, data)', 'ddClient.extension.vm.service.patch(url, data)');
            return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                method: 'PATCH',
                url,
                data,
            });
        },
        delete(url) {
            displayDeprecationWarning('window.ddClient.backend.delete(url)', 'ddClient.extension.vm.service.delete(url)');
            return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                method: 'DELETE',
                url,
            });
        },
        head(url) {
            displayDeprecationWarning('window.ddClient.backend.head(url)', 'ddClient.extension.vm.service.head(url)');
            return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                method: 'HEAD',
                url,
            });
        },
        request(config) {
            displayDeprecationWarning('window.ddClient.backend.request(config)', 'ddClient.extension.vm.service.request(config)');
            return ipcRenderer.invoke(`${extensionName}-backend-request`, config);
        },
        execInContainer: (container, cmdStr) => {
            // Just for backwards commpatibility - will be removed in the future
            const [cmd, ...args] = cmdStr.split(' ');
            return ipcRenderer
                .invoke(`${extensionName}-vm-docker-cmd`, container, cmd, args)
                .then(wrapExecResult);
        },
        execInVMExtension: (cmdStr) => {
            displayDeprecationWarning('window.ddClient.execInVMExtension(cmd)', 'ddClient.extension.vm.cli.exec(cmd)');
            // Just for backwards commpatibility - will be removed in the future
            const [cmd, ...args] = cmdStr.split(' ');
            return ipcRenderer
                .invoke(`${extensionName}-vm-docker-cmd`, `${extensionName}-desktop-extension-service`, cmd, args)
                .then(wrapExecResult);
        },
        spawnInVMExtension(cmd, args, callback) {
            displayDeprecationWarning('window.ddClient.spawnInVMExtension(cmd, ...args, callback)', 'ddClient.extension.vm.cli.spawn(cmd, ...args, callback)');
            const { port1: recv, port2: send } = new MessageChannel();
            ipcRenderer.postMessage(`${extensionName}-spawn-vm`, { cmd, args, container: `${extensionName}-desktop-extension-service` }, [send]);
            forwardEvents(recv, callback);
        },
    };
}
//# sourceMappingURL=createBackendNode.js.map