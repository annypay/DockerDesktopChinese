import { wrapExecResult } from './wrapExecResult';
import { forwardEventsStream } from './forwardEventsStream';
export function createExtensionNode(ipcRenderer, extensionName) {
    return {
        vm: {
            cli: {
                // @ts-expect-error TODO: Remove this
                exec(cmd, args, options) {
                    if (options?.stream) {
                        const { port1: recv, port2: send } = new MessageChannel();
                        ipcRenderer.postMessage(`${extensionName}-spawn-vm`, {
                            cmd,
                            args,
                            container: `${extensionName}-desktop-extension-service`,
                        }, [send]);
                        forwardEventsStream(recv, options.stream);
                        return {
                            close() {
                                recv.close();
                            },
                        };
                    }
                    // if not stream
                    return ipcRenderer
                        .invoke(`${extensionName}-vm-docker-cmd`, `${extensionName}-desktop-extension-service`, cmd, args)
                        .then(wrapExecResult);
                },
            },
            service: {
                get(url) {
                    return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                        method: 'GET',
                        url,
                    });
                },
                post(url, data) {
                    return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                        method: 'POST',
                        url,
                        data,
                    });
                },
                put(url, data) {
                    return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                        method: 'PUT',
                        url,
                        data,
                    });
                },
                patch(url, data) {
                    return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                        method: 'PATCH',
                        url,
                        data,
                    });
                },
                delete(url) {
                    return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                        method: 'DELETE',
                        url,
                    });
                },
                head(url) {
                    return ipcRenderer.invoke(`${extensionName}-backend-request`, {
                        method: 'HEAD',
                        url,
                    });
                },
                request(config) {
                    return ipcRenderer.invoke(`${extensionName}-backend-request`, config);
                },
            },
        },
        host: {
            cli: {
                // @ts-expect-error TODO: Remove this
                exec(cmd, args, options) {
                    if (options?.stream) {
                        const { port1: recv, port2: send } = new MessageChannel();
                        ipcRenderer.postMessage(`${extensionName}-spawn-cmd`, { cmd, args }, [send]);
                        forwardEventsStream(recv, options.stream);
                        return {
                            close() {
                                recv.close();
                            },
                        };
                    }
                    // if not stream
                    return ipcRenderer
                        .invoke(`${extensionName}-exec-cmd`, cmd, args)
                        .then(wrapExecResult);
                },
            },
        },
    };
}
//# sourceMappingURL=createExtensionNode.js.map