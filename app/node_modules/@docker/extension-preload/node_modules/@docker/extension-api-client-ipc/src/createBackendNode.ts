import type { IpcRenderer } from 'electron';

import type { v0 } from '@docker/extension-api-client-types';

import { displayDeprecationWarning } from './displayDeprecationWarning';
import { forwardEvents } from './forwardEvents';
import { wrapExecResult } from './wrapExecResult';

export function createBackendNode(
  extensionName: string,
  ipcRenderer: IpcRenderer,
): v0.Backend {
  return {
    get: (url) => {
      displayDeprecationWarning(
        'window.ddClient.backend.get(url)',
        'ddClient.extension.vm.service.get(url)',
      );
      return ipcRenderer.invoke(`${extensionName}-backend-request`, {
        method: 'GET',
        url,
      });
    },
    post(url: string, data: any): Promise<unknown> {
      displayDeprecationWarning(
        'window.ddClient.backend.post(url, data)',
        'ddClient.extension.vm.service.post(url, data)',
      );
      return ipcRenderer.invoke(`${extensionName}-backend-request`, {
        method: 'POST',
        url,
        data,
      });
    },
    put(url: string, data: any): Promise<unknown> {
      displayDeprecationWarning(
        'window.ddClient.backend.put(url, data)',
        'ddClient.extension.vm.service.put(url, data)',
      );
      return ipcRenderer.invoke(`${extensionName}-backend-request`, {
        method: 'PUT',
        url,
        data,
      });
    },
    patch(url: string, data: any): Promise<unknown> {
      displayDeprecationWarning(
        'window.ddClient.backend.patch(url, data)',
        'ddClient.extension.vm.service.patch(url, data)',
      );
      return ipcRenderer.invoke(`${extensionName}-backend-request`, {
        method: 'PATCH',
        url,
        data,
      });
    },
    delete(url: string): Promise<unknown> {
      displayDeprecationWarning(
        'window.ddClient.backend.delete(url)',
        'ddClient.extension.vm.service.delete(url)',
      );
      return ipcRenderer.invoke(`${extensionName}-backend-request`, {
        method: 'DELETE',
        url,
      });
    },
    head(url: string): Promise<unknown> {
      displayDeprecationWarning(
        'window.ddClient.backend.head(url)',
        'ddClient.extension.vm.service.head(url)',
      );
      return ipcRenderer.invoke(`${extensionName}-backend-request`, {
        method: 'HEAD',
        url,
      });
    },
    request(config: v0.RequestConfig): Promise<unknown> {
      displayDeprecationWarning(
        'window.ddClient.backend.request(config)',
        'ddClient.extension.vm.service.request(config)',
      );
      return ipcRenderer.invoke(`${extensionName}-backend-request`, config);
    },
    execInContainer: (container, cmdStr) => {
      // Just for backwards commpatibility - will be removed in the future
      const [cmd, ...args] = cmdStr.split(' ');

      return ipcRenderer
        .invoke(`${extensionName}-vm-docker-cmd`, container, cmd, args)
        .then(wrapExecResult);
    },
    execInVMExtension: (cmdStr) => {
      displayDeprecationWarning(
        'window.ddClient.execInVMExtension(cmd)',
        'ddClient.extension.vm.cli.exec(cmd)',
      );
      // Just for backwards commpatibility - will be removed in the future
      const [cmd, ...args] = cmdStr.split(' ');

      return ipcRenderer
        .invoke(
          `${extensionName}-vm-docker-cmd`,
          `${extensionName}-desktop-extension-service`,
          cmd,
          args,
        )
        .then(wrapExecResult);
    },
    spawnInVMExtension(
      cmd: string,
      args: string[],
      callback: (data: any, error: any) => void,
    ) {
      displayDeprecationWarning(
        'window.ddClient.spawnInVMExtension(cmd, ...args, callback)',
        'ddClient.extension.vm.cli.spawn(cmd, ...args, callback)',
      );
      const { port1: recv, port2: send } = new MessageChannel();

      ipcRenderer.postMessage(
        `${extensionName}-spawn-vm`,
        { cmd, args, container: `${extensionName}-desktop-extension-service` },
        [send],
      );

      forwardEvents(recv, callback);
    },
  };
}
