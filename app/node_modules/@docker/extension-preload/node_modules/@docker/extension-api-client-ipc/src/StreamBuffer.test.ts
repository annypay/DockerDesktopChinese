import { StreamBuffer } from './StreamBuffer';

describe('Stream events from Docker socket', () => {
  let streamBuffer: StreamBuffer;

  beforeEach(() => {
    streamBuffer = new StreamBuffer();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should return single event that arrives in one chunk from the socket', async () => {
    // given
    const chunk = '{"name":"single event"}\n';

    // when
    const events = streamBuffer.onData(chunk);

    // then
    expect(events).toEqual(['{"name":"single event"}']);
  });

  it('should return two events that arrive in two separate chunks from the socket', async () => {
    // given
    const firstChunk = '{"name":"first event"}\n';
    const secondChunk = '{"name":"second event"}\n';

    // when // then
    let events = streamBuffer.onData(firstChunk);
    expect(events).toEqual(['{"name":"first event"}']);
    events = streamBuffer.onData(secondChunk);
    expect(events).toEqual(['{"name":"second event"}']);
  });

  it('should return two events that arrive in one chunk from the socket', () => {
    // given
    const chunk = '{"name":"first event"}\n{"name":"second event"}\n';

    // when
    const events = streamBuffer.onData(chunk);

    // then
    expect(events).toEqual([
      '{"name":"first event"}',
      '{"name":"second event"}',
    ]);
  });

  it('should return two events that arrive in two chunks from the socket, first chunk contains first event + part of second event', () => {
    // given
    const firstChunk = '{"name":"first event"}\n{"name"';
    const secondChunk = ':"second event"}\n';

    // when // then
    let events = streamBuffer.onData(firstChunk);
    expect(events).toEqual(['{"name":"first event"}']);
    events = streamBuffer.onData(secondChunk);
    expect(events).toEqual(['{"name":"second event"}']);
  });

  it('should return one event that arrives in two chunks from the socket, each chunk contains part of the event', () => {
    // given
    const firstChunk = '{"name":"single ';
    const secondChunk = 'event"}\n';

    // when // then
    let events = streamBuffer.onData(firstChunk);
    expect(events).toEqual([]);
    events = streamBuffer.onData(secondChunk);
    expect(events).toEqual(['{"name":"single event"}']);
  });

  it('should split lines when reaching max buffer size, even without line break', () => {
    // given
    streamBuffer = new StreamBuffer(20);
    const firstChunk = '{"name":"single ';
    const secondChunk = 'event", "more_field":"some ';
    const thirdChunk = 'value"}\n';

    // when // then
    let events = streamBuffer.onData(firstChunk);
    expect(events).toEqual([]);
    events = streamBuffer.onData(secondChunk);
    expect(events).toEqual(['{"name":"single event", "more_field":"some ']);
    events = streamBuffer.onData(thirdChunk);
    expect(events).toEqual(['value"}']);
  });
});
