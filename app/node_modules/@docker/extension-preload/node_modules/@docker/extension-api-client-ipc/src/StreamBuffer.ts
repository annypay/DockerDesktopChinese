const lineEnding = '\n';
export class StreamBuffer {
  buffer: string;

  maxBufferSize;

  constructor(maxBufferSize = 4096 * 64) {
    this.buffer = '';
    this.maxBufferSize = maxBufferSize;
  }

  onData(chunk: string) {
    const data = this.buffer + chunk;
    let events = '';

    if (data.endsWith(lineEnding)) {
      this.reset();
      events = data;
    } else {
      const lastIndexOfSeparator = data.lastIndexOf(lineEnding);
      if (lastIndexOfSeparator === -1) {
        this.buffer = data;
      } else {
        events = data.substring(0, lastIndexOfSeparator + 1);
        this.buffer = data.substring(lastIndexOfSeparator + 1);
      }
    }
    // Let's not blow the memory out
    if (this.buffer.length >= this.maxBufferSize) {
      events += this.buffer;
      this.reset();
      console.error('reach buffer limit, sending event and resetting buffer');
    }

    return events.split(lineEnding).filter((event) => event.length > 0);
  }

  reset() {
    this.buffer = '';
  }
}
