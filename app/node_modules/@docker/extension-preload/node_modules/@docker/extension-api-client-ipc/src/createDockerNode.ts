import type { IpcRenderer } from 'electron';

import type { v1 } from '@docker/extension-api-client-types';

import { forwardEventsStream } from './forwardEventsStream';
import { wrapExecResult } from './wrapExecResult';

export function createDockerNode(
  ipcRenderer: IpcRenderer,
  extensionName: string,
): v1.Docker {
  return {
    cli: {
      // @ts-expect-error TODO: Remove this
      exec(cmd, args, options) {
        if (options?.stream) {
          const { port1: recv, port2: send } = new MessageChannel();

          ipcRenderer.postMessage(
            `${extensionName}-spawn-docker-cmd`,
            { cmd, args },
            [send],
          );

          forwardEventsStream(recv, options.stream);

          return {
            close() {
              recv.close();
            },
          };
        }

        // if not stream
        return ipcRenderer
          .invoke(`${extensionName}-exec-docker-cmd`, cmd, ...args)
          .then(wrapExecResult);
      },
    },
    listContainers(options: never): Promise<unknown> {
      return ipcRenderer.invoke(`docker-list-containers`, options);
    },
    listImages(options: never): Promise<unknown> {
      return ipcRenderer.invoke(`docker-list-images`, options);
    },
  };
}
