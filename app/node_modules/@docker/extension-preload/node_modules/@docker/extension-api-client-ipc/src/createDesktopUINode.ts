import type { IpcRenderer } from 'electron';

import type { v1 } from '@docker/extension-api-client-types';

export function createDesktopUINode(ipcRenderer: IpcRenderer): v1.DesktopUI {
  return {
    toast: {
      error(msg: string): void {
        ipcRenderer.invoke(`display-toast-error`, msg);
      },
      success(msg: string): void {
        ipcRenderer.invoke(`display-toast-success`, msg);
      },
      warning(msg: string): void {
        ipcRenderer.invoke(`display-toast-warning`, msg);
      },
    },
    dialog: {
      showOpenDialog(dialogProperties: any) {
        return ipcRenderer.invoke(`open-dialog`, dialogProperties);
      },
    },
    navigate: {
      async viewContainers(): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-containers`);
      },
      async viewContainer(id: string): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-container`, { id });
      },
      async viewContainerLogs(id: string): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-container-logs`, { id });
      },
      async viewContainerInspect(id: string): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-container-inspect`, { id });
      },
      async viewContainerStats(id: string): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-container-stats`, { id });
      },
      async viewImages(): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-images`);
      },
      async viewImage(id: string, tag: string): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-image`, { id, tag });
      },
      async viewVolumes(): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-volumes`);
      },
      async viewVolume(volume: string): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-volume`, volume);
      },
      async viewDevEnvironments(): Promise<void> {
        await ipcRenderer.invoke(`navigate-to-devenvs`);
      },
    },
  };
}
