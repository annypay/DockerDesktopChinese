import type { IpcRenderer } from 'electron';
import type { v1 } from '@docker/extension-api-client-types';
import type { Extension } from '@docker/extension-api-client-types/src/v1';

import { wrapExecResult } from './wrapExecResult';
import { forwardEventsStream } from './forwardEventsStream';

export function createExtensionNode(
  ipcRenderer: IpcRenderer,
  extensionName: string,
): Extension {
  return {
    vm: {
      cli: {
        // @ts-expect-error TODO: Remove this
        exec(cmd, args, options) {
          if (options?.stream) {
            const { port1: recv, port2: send } = new MessageChannel();

            ipcRenderer.postMessage(
              `${extensionName}-spawn-vm`,
              {
                cmd,
                args,
                container: `${extensionName}-desktop-extension-service`,
              },
              [send],
            );

            forwardEventsStream(recv, options.stream);

            return {
              close() {
                recv.close();
              },
            };
          }

          // if not stream
          return ipcRenderer
            .invoke(
              `${extensionName}-vm-docker-cmd`,
              `${extensionName}-desktop-extension-service`,
              cmd,
              args,
            )
            .then(wrapExecResult);
        },
      },
      service: {
        get(url: string): Promise<unknown> {
          return ipcRenderer.invoke(`${extensionName}-backend-request`, {
            method: 'GET',
            url,
          });
        },
        post(url: string, data: any): Promise<unknown> {
          return ipcRenderer.invoke(`${extensionName}-backend-request`, {
            method: 'POST',
            url,
            data,
          });
        },
        put(url: string, data: any): Promise<unknown> {
          return ipcRenderer.invoke(`${extensionName}-backend-request`, {
            method: 'PUT',
            url,
            data,
          });
        },
        patch(url: string, data: any): Promise<unknown> {
          return ipcRenderer.invoke(`${extensionName}-backend-request`, {
            method: 'PATCH',
            url,
            data,
          });
        },
        delete(url: string): Promise<unknown> {
          return ipcRenderer.invoke(`${extensionName}-backend-request`, {
            method: 'DELETE',
            url,
          });
        },
        head(url: string): Promise<unknown> {
          return ipcRenderer.invoke(`${extensionName}-backend-request`, {
            method: 'HEAD',
            url,
          });
        },
        request(config: v1.RequestConfig): Promise<unknown> {
          return ipcRenderer.invoke(`${extensionName}-backend-request`, config);
        },
      },
    },
    host: {
      cli: {
        // @ts-expect-error TODO: Remove this
        exec(cmd, args, options) {
          if (options?.stream) {
            const { port1: recv, port2: send } = new MessageChannel();

            ipcRenderer.postMessage(
              `${extensionName}-spawn-cmd`,
              { cmd, args },
              [send],
            );

            forwardEventsStream(recv, options.stream);

            return {
              close() {
                recv.close();
              },
            };
          }

          // if not stream
          return ipcRenderer
            .invoke(`${extensionName}-exec-cmd`, cmd, args)
            .then(wrapExecResult);
        },
      },
    },
  };
}
