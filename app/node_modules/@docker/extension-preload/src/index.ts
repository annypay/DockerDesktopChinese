import { ipcRenderer, contextBridge } from 'electron';

import { createDockerDesktopClient } from '@docker/extension-api-client-ipc';

import font from '@docker/desktop-theme/src/font';

import cssVariablesStyles from './css-variables.css';
import styles from './style.scss';

import themeOptions from './mui-theme.json'; // built as part of the build process

const params = new URLSearchParams(window.location.search);
const thisExtensionName: string = params.get('extensionName')!;
const hasBackend = params.get('hasBackend') === 'true';

const ddClient = createDockerDesktopClient(
  ipcRenderer,
  thisExtensionName,
  hasBackend,
);

const extensionE2E = process.env.EXTENSION_E2E === 'true';

if (extensionE2E) {
  (window as any).ddClient = ddClient;

  // We inject the theme into extensions to be picked up by the docker-mui-theme
  // package (if authors use it). This way, extensions automatically track
  // the DD theme.
  // contextBridge.exposeInMainWorld('__ddMuiV5Themes', themeOptions);
  (window as any)['__ddMuiV5Themes'] = themeOptions;
} else {
  contextBridge.exposeInMainWorld('ddClient', ddClient);

  // We inject the theme into extensions to be picked up by the docker-mui-theme
  // package (if authors use it). This way, extensions automatically track
  // the DD theme.
  // contextBridge.exposeInMainWorld('__ddMuiV5Themes', themeOptions);
  contextBridge.exposeInMainWorld('__ddMuiV5Themes', themeOptions);
}

window.addEventListener('DOMContentLoaded', () => {
  // these invoke the delayed-action style-loader style injection.
  // We have to delay until the window is ready; at the point when the
  // preload script first runs, there's no document to inject into.
  font.use();
  cssVariablesStyles.use();
  styles.use();
});
