// runs on Node, generates a CSS file that declares some variables

import * as fs from 'node:fs/promises';
import * as path from 'node:path';

import { extensionThemes } from '@docker/desktop-theme';

import { createTheme } from '@mui/material';
import type { ThemeOptions } from '@mui/material';
import type { CSSProperties } from '@mui/material/styles/createTypography';
import { DockerPaletteHue } from '@docker/desktop-theme/src/docker-color-palettes';

writeCssVariableFile();

async function writeCssVariableFile(): Promise<void> {
  const fileContents = generateCssVariableFileContents();

  await fs.writeFile(
    path.join(__dirname, '../src/css-variables.css'),
    fileContents,
  );
}

export function generateCssVariableFileContents(): string {
  return [
    buildCssVariableMediaQuery(
      'dark',
      deriveCssVariables(extensionThemes.dark),
    ),
    buildCssVariableMediaQuery(
      'light',
      deriveCssVariables(extensionThemes.light),
    ),
  ].join('\n');
}

type CssVariables = Record<string, string | number>;

function deriveCssVariables(themeOptions: ThemeOptions): CssVariables {
  const theme = createTheme(themeOptions);

  const monospaceFont = theme.typography['inline-code'].fontFamily;

  return confirmAllPopulated({
    'dd-spacing-unit': theme.spacing(1),

    'dd-text-color-primary': theme.palette.text.primary,
    'dd-text-color-secondary': theme.palette.text.secondary,

    ...generateTypographyVariables(theme.typography['body1'], 'body'),
    ...generateTypographyVariables(theme.typography['body2'], 'body_small'),
    ...generateTypographyVariables(theme.typography['h1'], 'h1'),
    ...generateTypographyVariables(theme.typography['h2'], 'h2'),
    ...generateTypographyVariables(theme.typography['h3'], 'h3'),

    'dd-text-inline_code-font-face': theme.typography['inline-code'].fontFamily,
    'dd-text-inline_code-size': theme.typography['inline-code'].fontSize,
    'dd-text-inline_code-background-color':
      theme.typography['inline-code'].backgroundColor,
    'dd-text-inline_code-padding': theme.typography['inline-code'].padding,
    'dd-text-inline_code-border-radius':
      theme.typography['inline-code'].borderRadius,

    'dd-text-font-face-primary': theme.typography.fontFamily,
    'dd-text-font-size-base': theme.typography.fontSize,
    'dd-text-font-weight-regular': theme.typography.fontWeightRegular,
    'dd-text-line-height': theme.typography.body2.lineHeight,

    'dd-text-font-face-monospace': monospaceFont,
    'dd-color-background': theme.palette.background.default,

    ...generatePaletteVariables(theme.palette.docker.amber, 'amber'),
    ...generatePaletteVariables(theme.palette.docker.blue, 'blue'),
    ...generatePaletteVariables(theme.palette.docker.green, 'green'),
    ...generatePaletteVariables(theme.palette.docker.grey, 'grey'),
    ...generatePaletteVariables(theme.palette.docker.red, 'red'),
    ...generatePaletteVariables(theme.palette.docker.violet, 'violet'),

    'dd-page-padding-left': 'calc(var(--dd-spacing-unit) * 3)',
    'dd-page-padding-right': 'calc(var(--dd-spacing-unit) * 3)',
    'dd-page-padding-top': 'calc(var(--dd-spacing-unit) * 3)',
    'dd-page-padding-bottom': 'calc(var(--dd-spacing-unit) * 3)',
  });
}

function generatePaletteVariables(
  paletteHue: DockerPaletteHue,
  outputColorName: string,
): CssVariables {
  return {
    [`dd-color-${outputColorName}-300`]: paletteHue[300],
    [`dd-color-${outputColorName}-500`]: paletteHue[500],
    [`dd-color-${outputColorName}-700`]: paletteHue[700],
  };
}

function generateTypographyVariables(
  typographyTheme: CSSProperties,
  outputTypographyElementName: string,
): CssVariables {
  return confirmAllPopulated({
    [`dd-text-${outputTypographyElementName}-font-size`]:
      typographyTheme.fontSize,
    [`dd-text-${outputTypographyElementName}-font-weight`]:
      typographyTheme.fontWeight,
    [`dd-text-${outputTypographyElementName}-letter-spacing`]:
      typographyTheme.letterSpacing ?? 'normal',
    [`dd-text-${outputTypographyElementName}-line-height`]:
      typographyTheme.lineHeight,
    [`dd-text-${outputTypographyElementName}-text-transform`]:
      typographyTheme.transform ?? 'none',
  });
}

function buildCssVariableMediaQuery(
  colorScheme: 'light' | 'dark',
  variables: CssVariables,
): string {
  return `@media (prefers-color-scheme: ${colorScheme}) {
    :root {
      ${Object.entries(variables)
        .map(([variableName, value]) => `--${variableName}: ${value};`)
        .join('\n')}
    }
  }`;
}

function confirmAllPopulated(
  input: Record<string, string | number | undefined>,
): Record<string, string | number> {
  for (const [key, value] of Object.entries(input)) {
    if (value === undefined) {
      throw new Error(`Value ${key} was undefined`);
    }
  }

  return input as Record<string, string | number>;
}
